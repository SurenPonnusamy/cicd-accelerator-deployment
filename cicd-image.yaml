apiVersion: v1
kind: Namespace
metadata:
  name: cicd-accelerator
  labels:
    name: cicd-image
    
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: cicd-pv-volume
  #namespace: cicd-accelerator
  labels:
    name: cicd-image  
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  #persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/tmp"
    
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cicd-pv-claim 
  namespace: cicd-accelerator
  labels:
    name: cicd-image
spec:  
  storageClassName:  manual #hostpath #hostpath    
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
      
---      

apiVersion: v1
data:
  name: surendhardevops
  url: 192.168.1.2
kind: ConfigMap
metadata:
  name: cicd-config
  namespace: cicd-accelerator
  labels:
    name: cicd-image

---

apiVersion: v1
data:
  PASSWORD: Y2ljZF9kYl91c2Vy #YWRtaW5AMTIz
  USERNAME: Y2ljZF9kYl91c2Vy #cm9vdA==
kind: Secret
metadata:
  name: sqldb-secret
  namespace: cicd-accelerator
type: Opaque

---

apiVersion: apps/v1
kind: Deployment
metadata: 
  labels: 
    app: cicd-image
  name: cicd-image
  namespace: cicd-accelerator
spec: 
  replicas: 1
  selector: 
    matchLabels: 
      app: cicd-image
  template: 
    metadata: 
      labels: 
        app: cicd-image
    spec:
      volumes:
        - name: cicd-pv-storage
          persistentVolumeClaim:
            claimName: cicd-pv-claim    
      containers: 
        - image: "docker.io/surendharselvakumar/alpine-cicd-image:1.0.25"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |- 
                  curl -s http://localhost:3001/api/getBuildServers | grep -c name #Container will restart on it's own, if this condition fails!
            # httpGet:
              # path: /api/getPipelines
              # port: 3001
              # scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |- 
                  curl -s http://localhost:3001/api/getBuildServers | grep -c name #Stops sending the traffic to pod, if this condition fails!
            # httpGet:
              # path: /api/getPipelines
              # port: 3001
              # scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
          name: cicd-image
          resources:
            limits:
              cpu: 700m
            requests:
              cpu: 200m #Requested is 200Mi, if needed the pod scales upto maximum value, and reaches the value of 700Mi cpu limits
          ports: 
            - containerPort: 3000
              protocol: TCP
            - containerPort: 3001
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/log/cicd-logs/"
              name: cicd-pv-storage              
          env:
          - name: myname
            valueFrom: 
              configMapKeyRef:
                name: cicd-config
                key: name
          - name: myurl
            valueFrom:
              configMapKeyRef:
                name: cicd-config
                key: url
          - name: USERNAME
            valueFrom:
              secretKeyRef:
                name: sqldb-secret
                key: USERNAME
          - name: PASSWORD
            valueFrom: 
              secretKeyRef:
                name: sqldb-secret
                key: PASSWORD                
                
---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: cicd-image
  name: cicd-frontend-service
  namespace: cicd-accelerator
spec:
  ports:
  - port: 3003 #port accessing in the server
    protocol: TCP
    targetPort: 3000 #port exposed in docker container
  selector:
    app: cicd-image
  type: NodePort #LoadBalancer #NodePort #Using LoadBalancer type to test in the dev envi, can be changed to NodePort or ClusterIP and modify the ingress hostname to access the backend-service in the frontend. Preferrable is NodePort.
# status:
  # loadBalancer:
    # ingress:
    # - hostname: localhost
    
---

apiVersion: v1
kind: Service
metadata:  
  labels:
    app: cicd-image
  name: cicd-backend-service
  namespace: cicd-accelerator
spec:
  ports:
  - port: 3001 #port accessing in the server
    protocol: TCP
    targetPort: 3001 #port exposed in docker container
  selector:
    app: cicd-image
  type: NodePort #LoadBalancer #NodePort #Using LoadBalancer type to test in the dev envi, can be changed to NodePort or ClusterIP and modify the ingress hostname to access the backend-service in the frontend. Preferrable is NodePort.
# status:
  # loadBalancer:
    # ingress:
    # - hostname: localhost
    
---

# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: cicd-image
  namespace: cicd-accelerator
spec:
  maxReplicas: 8
  minReplicas: 2 #Min replicas when the cpu is less than 200Mi, if the cpu increases more than 200Mi, then the replicas will scale upto 8 or maximum
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cicd-image
  targetCPUUtilizationPercentage: 80
status:
  currentCPUUtilizationPercentage: 127
  currentReplicas: 2
  desiredReplicas: 4

---

apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: nginx-ingress-class
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minimal-ingress-backend
  namespace: cicd-accelerator
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx-ingress-class
  rules:
  - host: surendharapp-backend.com 
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: cicd-backend-service
            port:
              number: 3001
              
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minimal-ingress-frontend
  namespace: cicd-accelerator
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx-ingress-class
  rules:
  - host: surendharapp-frontend.com 
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: cicd-frontend-service
            port:
              number: 3003

---
              


##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              