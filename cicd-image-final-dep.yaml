apiVersion: v1
kind: Namespace
metadata:
  name: cicd-accelerator
  labels:
    name: cicd-image
    
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: cicd-pv-volume
  #namespace: cicd-accelerator
  labels:
    name: cicd-image  
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  #persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/tmp"
    
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cicd-pv-claim 
  namespace: cicd-accelerator
  labels:
    name: cicd-image
spec:  
  storageClassName:  manual #hostpath #hostpath    
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
      
---      

apiVersion: v1
data:
  name: surendhardevops
  url: 192.168.1.3
kind: ConfigMap
metadata:
  name: cicd-config
  namespace: cicd-accelerator
  labels:
    name: cicd-image

---

apiVersion: v1
data:
  PASSWORD: Y2ljZF9kYl91c2Vy #YWRtaW5AMTIz
  USERNAME: Y2ljZF9kYl91c2Vy #cm9vdA==
kind: Secret
metadata:
  name: sqldb-secret
  namespace: cicd-accelerator
type: Opaque

# ---

# apiVersion: apps/v1
# kind: Deployment
# metadata: 
  # labels: 
    # app: cicd-image-backend
  # name: cicd-image-backend
  # namespace: cicd-accelerator
# spec: 
  # replicas: 1
  # selector: 
    # matchLabels: 
      # app: cicd-image-backend
  # template: 
    # metadata: 
      # labels: 
        # app: cicd-image-backend
    # spec:
      # volumes:
        # - name: cicd-pv-storage
          # persistentVolumeClaim:
            # claimName: cicd-pv-claim    
      # containers: 
        # - image: "docker.io/surendharselvakumar/cicd-backend:1.0.0"
          # imagePullPolicy: IfNotPresent
          # livenessProbe:
            # exec:
              # command:
                # - sh
                # - -c
                # - curl -s http://localhost:30023/api/getBuildServers | grep -c name #Container will restart on it's own, if this condition fails!
            # initialDelaySeconds: 15
            # periodSeconds: 5
          # readinessProbe:
            # exec:
              # command:
                # - sh
                # - -c
                # - curl -s http://localhost:30023/api/getBuildServers | grep -c name #Stops sending the traffic to pod, if this condition fails!
            # initialDelaySeconds: 15
            # periodSeconds: 5
          # name: cicd-image-backend-resources
          # resources:
            # limits:
              # cpu: 700m
            # requests:
              # cpu: 200m #Requested is 200Mi, if needed the pod scales upto maximum value, and reaches the value of 700Mi cpu limits
          # ports: 
            # - containerPort: 30023
              # protocol: TCP
          # volumeMounts:
            # - mountPath: "/var/log/cicd-logs/"
              # name: cicd-pv-storage              
          # env:
          # - name: myname
            # valueFrom: 
              # configMapKeyRef:
                # name: cicd-config
                # key: name
          # - name: myurl
            # valueFrom:
              # configMapKeyRef:
                # name: cicd-config
                # key: url
          # - name: USERNAME
            # valueFrom:
              # secretKeyRef:
                # name: sqldb-secret
                # key: USERNAME
          # - name: PASSWORD
            # valueFrom: 
              # secretKeyRef:
                # name: sqldb-secret
                # key: PASSWORD                
                
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cicd-image-backend
  namespace: cicd-accelerator
spec:
  replicas: 1
  selector: 
    matchLabels: 
      app: cicd-image-backend
  template: 
    metadata: 
      labels: 
        app: cicd-image-backend
    spec:
      volumes:
        - name: backend-volume
          persistentVolumeClaim:
            claimName: cicd-pv-claim
      containers:
        - name: sidecar-containers
          image: 'docker.io/surendharselvakumar/logstash:1.0.2'
          # livenessProbe:
            # tcpSocket:
              # port: 9600 #Container will restart on it's own, if this condition fails!
            # initialDelaySeconds: 15
            # periodSeconds: 5
          # readinessProbe:
            # exec:
              # command:
                # - sh
                # - -c
                # - |-
                  # curl -s http://localhost:30023/api/checkConnectivity | grep -c "Connected"  #Stops sending the traffic to pod, if this condition fails!
            # initialDelaySeconds: 15
            # periodSeconds: 5          
          imagePullPolicy: IfNotPresent
          name: cicd-image-logs-resources
          resources:
            limits:
              cpu: 700m
            requests:
              cpu: 200m          
          ports:
          - containerPort: 9600
            protocol: TCP          
          - containerPort: 5044
            protocol: TCP           
          volumeMounts:
            - name: backend-volume
              mountPath: /var/log/cicd-logs  
        - name: cicd-backend-container
          image: 'docker.io/surendharselvakumar/cicd-backend:1.0.5'		
          imagePullPolicy: IfNotPresent          
          livenessProbe:
            tcpSocket:
              port: 30023 #Container will restart on it's own, if this condition fails!
            initialDelaySeconds: 15
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |-
                  curl -s http://localhost:30023/api/checkConnectivity | grep -c "Connected"  #Stops sending the traffic to pod, if this condition fails!
            initialDelaySeconds: 15
            periodSeconds: 5
          name: cicd-image-backend-resources
          resources:
            limits:
              cpu: 700m
            requests:
              cpu: 200m			
          ports: 
            - containerPort: 30023
              protocol: TCP			
          volumeMounts:
            - name: backend-volume
              mountPath: /var/log/cicd-logs
          env:
          - name: myname
            valueFrom: 
              configMapKeyRef:
                name: cicd-config
                key: name
          - name: myurl
            valueFrom:
              configMapKeyRef:
                name: cicd-config
                key: url
          - name: USERNAME
            valueFrom:
              secretKeyRef:
                name: sqldb-secret
                key: USERNAME
          - name: PASSWORD
            valueFrom: 
              secretKeyRef:
                name: sqldb-secret
                key: PASSWORD			  

---

apiVersion: apps/v1
kind: Deployment
metadata: 
  labels: 
    app: cicd-image-frontend
  name: cicd-image-frontend
  namespace: cicd-accelerator
spec: 
  replicas: 1
  selector: 
    matchLabels: 
      app: cicd-image-frontend
  template: 
    metadata: 
      labels: 
        app: cicd-image-frontend
    spec:  
      containers: 
        - image: "docker.io/surendharselvakumar/cicd-frontend:1.0.1"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            tcpSocket:
              port: 3000 #Container will restart on it's own, if this condition fails!
            initialDelaySeconds: 15
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |-
                  curl -s http://localhost:3000/home | grep -c name #Stops sending the traffic to pod, if this condition fails!
            initialDelaySeconds: 15
            periodSeconds: 5
          name: cicd-image-frontend-resources
          resources:
            limits:
              cpu: 700m
            requests:
              cpu: 200m #Requested is 200Mi, if needed the pod scales upto maximum value, and reaches the value of 700Mi cpu limits
          ports: 
            - containerPort: 3000
              protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: cicd-image-frontend
  name: cicd-frontend-service
  namespace: cicd-accelerator
spec:
  ports:
  - port: 3003 #port accessing in the server
    protocol: TCP
    targetPort: 3000 #port exposed in docker container
  selector:
    app: cicd-image-frontend
  type: LoadBalancer #LoadBalancer #NodePort #Using LoadBalancer type to test in the dev envi, can be changed to NodePort or ClusterIP and modify the ingress hostname to access the backend-service in the frontend. Preferrable is NodePort.
# status:
  # loadBalancer:
    # ingress:
    # - hostname: localhost
    
---

apiVersion: v1
kind: Service
metadata:  
  labels:
    app: cicd-image
  name: cicd-backend-service
  namespace: cicd-accelerator
spec:
  ports:
  - port: 30023 #port accessing in the server
    protocol: TCP
    targetPort: 30023 #port exposed in docker container
    nodePort: 30023
  selector:
    app: cicd-image-backend
  type: NodePort #LoadBalancer #NodePort #Using LoadBalancer type to test in the dev envi, can be changed to NodePort or ClusterIP and modify the ingress hostname to access the backend-service in the frontend. Preferrable is NodePort.
# status:
  # loadBalancer:
    # ingress:
    # - hostname: localhost
    
---

# apiVersion: v1
# kind: Service
# metadata:  
  # labels:
    # app: cicd-image
  # name: cicd-backend-service-logstash
  # namespace: cicd-accelerator
# spec:
  # ports:
  # - port: 9600 #port accessing in the server
    # protocol: TCP
    # targetPort: 9600 #port exposed in docker container
    # nodePort: 30001
  # selector:
    # app: cicd-image-backend
  # type: LoadBalancer

---

# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: cicd-image-backend
  namespace: cicd-accelerator
spec:
  maxReplicas: 2
  minReplicas: 2 #Min replicas when the cpu is less than 200Mi, if the cpu increases more than 200Mi, then the replicas will scale upto 8 or maximum
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cicd-image-backend
  targetCPUUtilizationPercentage: 80
# status:
  # currentCPUUtilizationPercentage: 127
  # currentReplicas: 2
  # desiredReplicas: 4

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: cicd-image-frontend
  namespace: cicd-accelerator
spec:
  maxReplicas: 2
  minReplicas: 2 #Min replicas when the cpu is less than 200Mi, if the cpu increases more than 200Mi, then the replicas will scale upto 8 or maximum
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cicd-image-frontend
  targetCPUUtilizationPercentage: 80
# status:
  # currentCPUUtilizationPercentage: 127
  # currentReplicas: 2
  # desiredReplicas: 4

---

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cicd-backend-pdb
  namespace: cicd-accelerator
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: cicd-image-backend
status:
  currentHealthy: 2
  desiredHealthy: 2
  disruptionsAllowed: 0
  expectedPods: 2

---

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cicd-frontend-pdb
  namespace: cicd-accelerator
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: cicd-image-frontend
status:
  currentHealthy: 2
  desiredHealthy: 2
  disruptionsAllowed: 0
  expectedPods: 2   
  
# apiVersion: networking.k8s.io/v1
# kind: IngressClass
# metadata:
  # labels:
    # app.kubernetes.io/component: controller
  # name: nginx-ingress-class
  # annotations:
    # ingressclass.kubernetes.io/is-default-class: "true"
# spec:
  # controller: k8s.io/ingress-nginx

# ---

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
  # name: minimal-ingress-backend
  # namespace: cicd-accelerator
  # annotations:
    # nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
  # ingressClassName: nginx-ingress-class
  # defaultBackend:
    # service:
      # name: cicd-backend-service
      # port:
        # number: 30023
  # rules:
  # - host: surendharapp-backend.com 
    # http:
      # paths:
      # - pathType: Prefix
        # path: /
        # backend:
          # service:
            # name: cicd-backend-service
            # port:
              # number: 30023
              
# ---

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
  # name: minimal-ingress-frontend
  # namespace: cicd-accelerator
  # annotations:
    # nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
  # ingressClassName: nginx-ingress-class
  # defaultBackend:
    # service:
      # name: cicd-frontend-service
      # port:
        # number: 3003 
  # rules:
  # - host: surendharapp-frontend.com 
    # http:
      # paths:
      # - pathType: Prefix
        # path: /
        # backend:
          # service:
            # name: cicd-frontend-service
            # port:
              # number: 3003

# ---
              


##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              
